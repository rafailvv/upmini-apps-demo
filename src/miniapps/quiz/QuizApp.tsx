import React, { useState, useEffect } from 'react';
import { QuizStartScreen } from './pages/QuizStartScreen';
import { QuizIntroScreen } from './pages/QuizIntroScreen';
import { QuizQuestionScreen } from './pages/QuizQuestionScreen';
import { QuizResultScreen } from './pages/QuizResultScreen';
import { QuizReviewScreen } from './pages/QuizReviewScreen';
import { ShareNotification } from './components/ShareNotification';
import './styles.css';

export interface QuizQuestion {
  id: number;
  question: string;
  type: 'single' | 'multiple' | 'open';
  options?: string[];
  correctAnswer?: number | number[];
  correctText?: string;
  explanation?: string;
  hint?: string;
}

export interface QuizResult {
  score: number;
  total: number;
  percentage: number;
  correctAnswers: number[];
  wrongAnswers: number[];
}

const quizData: QuizQuestion[] = [
  {
    id: 1,
    question: "–ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?",
    type: 'single',
    options: ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"],
    correctAnswer: 0,
    explanation: "–ú–æ—Å–∫–≤–∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ —Å 1991 –≥–æ–¥–∞.",
    hint: "–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä—É–ø–Ω–µ–π—à–∏–º –≤ –†–æ—Å—Å–∏–∏ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω—ã."
  },
  {
    id: 2,
    question: "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
    type: 'single',
    options: ["7", "8", "9", "10"],
    correctAnswer: 1,
    explanation: "–í –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ 8 –ø–ª–∞–Ω–µ—Ç: –ú–µ—Ä–∫—É—Ä–∏–π, –í–µ–Ω–µ—Ä–∞, –ó–µ–º–ª—è, –ú–∞—Ä—Å, –Æ–ø–∏—Ç–µ—Ä, –°–∞—Ç—É—Ä–Ω, –£—Ä–∞–Ω, –ù–µ–ø—Ç—É–Ω.",
    hint: "–ü–ª—É—Ç–æ–Ω –±–æ–ª—å—à–µ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–ª–∞–Ω–µ—Ç–æ–π —Å 2006 –≥–æ–¥–∞."
  },
  {
    id: 3,
    question: "–ö–∞–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–æ–¥—ã?",
    type: 'single',
    options: ["H2O", "CO2", "O2", "H2SO4"],
    correctAnswer: 0,
    explanation: "H2O - —ç—Ç–æ —Ö–∏–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–æ–¥—ã, —Å–æ—Å—Ç–æ—è—â–µ–π –∏–∑ –¥–≤—É—Ö –∞—Ç–æ–º–æ–≤ –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –æ–¥–Ω–æ–≥–æ –∞—Ç–æ–º–∞ –∫–∏—Å–ª–æ—Ä–æ–¥–∞."
  },
  {
    id: 4,
    question: "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Ä–æ–º–∞–Ω '–í–æ–π–Ω–∞ –∏ –º–∏—Ä'?",
    type: 'single',
    options: ["–§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π", "–ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤", "–ò–≤–∞–Ω –¢—É—Ä–≥–µ–Ω–µ–≤"],
    correctAnswer: 1,
    explanation: "–õ–µ–≤ –ù–∏–∫–æ–ª–∞–µ–≤–∏—á –¢–æ–ª—Å—Ç–æ–π –Ω–∞–ø–∏—Å–∞–ª —Ä–æ–º–∞–Ω '–í–æ–π–Ω–∞ –∏ –º–∏—Ä' –≤ 1863-1869 –≥–æ–¥–∞—Ö."
  },
  {
    id: 5,
    question: "–ö–∞–∫–∏–µ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏?",
    type: 'multiple',
    options: ["Java", "C++", "Python", "HTML", "JavaScript"],
    correctAnswer: [0, 1, 2, 4],
    explanation: "Java, C++, Python –∏ JavaScript –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ. HTML - —ç—Ç–æ —è–∑—ã–∫ —Ä–∞–∑–º–µ—Ç–∫–∏, –∞ –Ω–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."
  },
  {
    id: 6,
    question: "–ù–∞–∑–æ–≤–∏—Ç–µ —Å—Ç–æ–ª–∏—Ü—É –§—Ä–∞–Ω—Ü–∏–∏",
    type: 'open',
    correctText: "–ü–∞—Ä–∏–∂",
    explanation: "–ü–∞—Ä–∏–∂ - —Å—Ç–æ–ª–∏—Ü–∞ –∏ –∫—Ä—É–ø–Ω–µ–π—à–∏–π –≥–æ—Ä–æ–¥ –§—Ä–∞–Ω—Ü–∏–∏, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞ —Ä–µ–∫–µ –°–µ–Ω–∞ –≤ —Å–µ–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω—ã.",
    hint: "–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –∏–∑–≤–µ—Å—Ç–µ–Ω –∫–∞–∫ '–ì–æ—Ä–æ–¥ —Å–≤–µ—Ç–∞' –∏ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–æ–º —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã."
  }
];



export const Quiz: React.FC = () => {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<(number | number[] | string)[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [timeLeft, setTimeLeft] = useState(300);
  const [quizStarted, setQuizStarted] = useState(false);
  const [showStartScreen, setShowStartScreen] = useState(true);
  const [showIntroScreen, setShowIntroScreen] = useState(false);
  const [showReviewScreen, setShowReviewScreen] = useState(false);
  const [showShareNotification, setShowShareNotification] = useState(false);
  const [shareMessage, setShareMessage] = useState('');


  useEffect(() => {
    let timer: number;
    if (quizStarted && !showResults && timeLeft > 0) {
      timer = window.setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
    } else if (timeLeft === 0 && !showResults) {
      handleFinishQuiz();
    }
    return () => clearTimeout(timer);
  }, [timeLeft, quizStarted, showResults]);

  const handleAnswer = (answer: number | number[] | string) => {
    const newAnswers = [...answers];
    newAnswers[currentQuestionIndex] = answer;
    setAnswers(newAnswers);

    if (currentQuestionIndex < quizData.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      handleFinishQuiz();
    }
  };

  const handleFinishQuiz = () => {
    setShowResults(true);
  };

  const calculateResults = (): QuizResult => {
    let correctCount = 0;
    const correctAnswers: number[] = [];
    const wrongAnswers: number[] = [];

    quizData.forEach((question, index) => {
      const userAnswer = answers[index];
      let isCorrect = false;

      if (question.type === 'single' || !question.type) {
        isCorrect = userAnswer === question.correctAnswer;
      } else if (question.type === 'multiple') {
        const correct = question.correctAnswer as number[];
        const user = userAnswer as number[];
        isCorrect = correct.every(ans => user.includes(ans)) && user.every(ans => correct.includes(ans));
      } else if (question.type === 'open') {
        isCorrect = typeof userAnswer === 'string' && 
                   userAnswer.toLowerCase().trim() === (question.correctText as string).toLowerCase().trim();
      }

      if (isCorrect) {
        correctCount++;
        correctAnswers.push(index);
      } else {
        wrongAnswers.push(index);
      }
    });

    return {
      score: correctCount,
      total: quizData.length,
      percentage: Math.round((correctCount / quizData.length) * 100),
      correctAnswers,
      wrongAnswers
    };
  };


  const startQuiz = (_topic: string) => {
    setShowStartScreen(false);
    setShowIntroScreen(true);
  };

  const proceedToQuiz = () => {
    setShowIntroScreen(false);
    setQuizStarted(true);
  };

  const backToStart = () => {
    setShowIntroScreen(false);
    setShowStartScreen(true);
  };

  const handleReview = () => {
    setShowReviewScreen(true);
  };

  const handleBackFromReview = () => {
    setShowReviewScreen(false);
  };

  const handleShare = () => {
    const result = calculateResults();
    const shareText = `üß† –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–∏–∑–∞: ${result.score} –∏–∑ ${result.total} (${result.percentage}%)\n\n`;
    const shareUrl = window.location.href;
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞
    const fullShareText = `${shareText}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –∫–≤–∏–∑–µ! ${shareUrl}`;
    
    // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Web Share API (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
    if (navigator.share) {
      navigator.share({
        title: '–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–∏–∑–∞',
        text: fullShareText,
        url: shareUrl
      }).catch((error) => {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–µ—Ä–∏–Ω–≥–µ:', error);
        fallbackShare(fullShareText);
      });
    } else {
      // Fallback –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–æ–≤
      fallbackShare(fullShareText);
    }
  };

  const fallbackShare = (text: string) => {
    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    if (navigator.clipboard) {
      navigator.clipboard.writeText(text).then(() => {
        setShareMessage('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        setShowShareNotification(true);
      }).catch(() => {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        showShareModal(text);
      });
    } else {
      // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      showShareModal(text);
    }
  };

  const showShareModal = (text: string) => {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π textarea –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    const textarea = document.createElement('textarea');
    textarea.value = text;
    textarea.style.position = 'fixed';
    textarea.style.left = '-999999px';
    textarea.style.top = '-999999px';
    document.body.appendChild(textarea);
    textarea.focus();
    textarea.select();
    
    try {
      document.execCommand('copy');
      setShareMessage('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
      setShowShareNotification(true);
    } catch (err) {
      setShareMessage('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. –¢–µ–∫—Å—Ç: ' + text);
      setShowShareNotification(true);
    }
    
    document.body.removeChild(textarea);
  };

  if (showStartScreen) {
    return <QuizStartScreen onStart={startQuiz} />;
  }

  if (showIntroScreen) {
    return <QuizIntroScreen onProceed={proceedToQuiz} onBack={backToStart} />;
  }

  if (!quizStarted) {
    return (
      <div className="quiz-container">
        <div className="quiz-start">
          <h1 className="quiz-title">üß† –ö–≤–∏–∑ –Ω–∞ –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è</h1>
          <p className="quiz-description">
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è! –í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ {quizData.length} –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ 5 –º–∏–Ω—É—Ç.
          </p>
          <div className="quiz-info">
            <div className="quiz-info-item">
              <span className="quiz-info-label">–í–æ–ø—Ä–æ—Å–æ–≤:</span>
              <span className="quiz-info-value">{quizData.length}</span>
            </div>
            <div className="quiz-info-item">
              <span className="quiz-info-label">–í—Ä–µ–º—è:</span>
              <span className="quiz-info-value">5 –º–∏–Ω</span>
            </div>
          </div>
          <button className="quiz-start-button" onClick={() => startQuiz('–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è')}>
            –ù–∞—á–∞—Ç—å –∫–≤–∏–∑
          </button>
        </div>
      </div>
    );
  }

  if (showReviewScreen) {
    return (
      <>
        <QuizReviewScreen 
          questions={quizData}
          userAnswers={answers}
          onBack={handleBackFromReview}
        />
        <ShareNotification
          isVisible={showShareNotification}
          onClose={() => setShowShareNotification(false)}
          message={shareMessage}
        />
      </>
    );
  }

  if (showResults) {
    return (
      <>
        <QuizResultScreen 
          result={calculateResults()} 
          onReview={handleReview}
          onShare={handleShare}
        />
        <ShareNotification
          isVisible={showShareNotification}
          onClose={() => setShowShareNotification(false)}
          message={shareMessage}
        />
      </>
    );
  }

  return (
    <>
      <QuizQuestionScreen
        question={quizData[currentQuestionIndex]}
        questionNumber={currentQuestionIndex + 1}
        totalQuestions={quizData.length}
        onAnswer={handleAnswer}
        onSkip={() => handleAnswer(-1)} // -1 indicates skipped
        timeLeft={timeLeft}
      />
      <ShareNotification
        isVisible={showShareNotification}
        onClose={() => setShowShareNotification(false)}
        message={shareMessage}
      />
    </>
  );
};
