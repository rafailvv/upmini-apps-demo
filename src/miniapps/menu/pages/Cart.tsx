import React, { useState } from 'react';
import '../styles.css';

interface CartItem {
  id: number;
  name: string;
  price: number;
  quantity: number;
  image: string;
}

export const Cart: React.FC = () => {
  const [cartItems, setCartItems] = useState<CartItem[]>([
    {
      id: 1,
      name: '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞ —Å –≥—Ä–∏–±–∞–º–∏ –∏ —Å—ã—Ä–æ–º',
      price: 500,
      quantity: 2,
      image: '/api/placeholder/100/100'
    },
    {
      id: 2,
      name: '–°—Ç–µ–π–∫ –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã',
      price: 800,
      quantity: 1,
      image: '/api/placeholder/100/100'
    },
    {
      id: 3,
      name: '–¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π',
      price: 350,
      quantity: 1,
      image: '/api/placeholder/100/100'
    }
  ]);

  const [deliveryInfo, setDeliveryInfo] = useState({
    address: '',
    phone: '',
    name: '',
    comment: ''
  });

  const updateQuantity = (itemId: number, newQuantity: number) => {
    if (newQuantity <= 0) {
      setCartItems(prev => prev.filter(item => item.id !== itemId));
    } else {
      setCartItems(prev => prev.map(item => 
        item.id === itemId ? { ...item, quantity: newQuantity } : item
      ));
    }
  };

  const getTotalPrice = () => {
    return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const getDeliveryFee = () => {
    return getTotalPrice() > 1000 ? 0 : 200;
  };

  const getFinalTotal = () => {
    return getTotalPrice() + getDeliveryFee();
  };

  const handleOrder = () => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    alert('–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');
  };

  return (
    <div className="cart-page">
      <div className="cart-header">
        <h2>–ö–æ—Ä–∑–∏–Ω–∞</h2>
        <span className="items-count">{cartItems.length} —Ç–æ–≤–∞—Ä–æ–≤</span>
      </div>

      {cartItems.length === 0 ? (
        <div className="empty-cart">
          <div className="empty-cart-icon">üõí</div>
          <h3>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h3>
          <p>–î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑</p>
        </div>
      ) : (
        <>
          {/* Cart Items */}
          <div className="cart-items">
            {cartItems.map((item) => (
              <div key={item.id} className="cart-item">
                <div className="item-image">
                  <div className="image-placeholder-small"></div>
                </div>
                
                <div className="item-details">
                  <h3 className="item-name">{item.name}</h3>
                  <div className="item-price">{item.price} ‚ÇΩ</div>
                  
                  <div className="quantity-controls">
                    <button 
                      className="quantity-btn"
                      onClick={() => updateQuantity(item.id, item.quantity - 1)}
                    >
                      -
                    </button>
                    <span className="quantity">{item.quantity}</span>
                    <button 
                      className="quantity-btn"
                      onClick={() => updateQuantity(item.id, item.quantity + 1)}
                    >
                      +
                    </button>
                  </div>
                </div>
                
                <div className="item-total">
                  {item.price * item.quantity} ‚ÇΩ
                </div>
              </div>
            ))}
          </div>

          {/* Delivery Info */}
          <div className="delivery-section">
            <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ</h3>
            
            <div className="form-group">
              <label>–ò–º—è</label>
              <input
                type="text"
                value={deliveryInfo.name}
                onChange={(e) => setDeliveryInfo(prev => ({ ...prev, name: e.target.value }))}
                placeholder="–í–∞—à–µ –∏–º—è"
              />
            </div>
            
            <div className="form-group">
              <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
              <input
                type="tel"
                value={deliveryInfo.phone}
                onChange={(e) => setDeliveryInfo(prev => ({ ...prev, phone: e.target.value }))}
                placeholder="+7 (999) 123-45-67"
              />
            </div>
            
            <div className="form-group">
              <label>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</label>
              <input
                type="text"
                value={deliveryInfo.address}
                onChange={(e) => setDeliveryInfo(prev => ({ ...prev, address: e.target.value }))}
                placeholder="–£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞"
              />
            </div>
            
            <div className="form-group">
              <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</label>
              <textarea
                value={deliveryInfo.comment}
                onChange={(e) => setDeliveryInfo(prev => ({ ...prev, comment: e.target.value }))}
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
                rows={3}
              />
            </div>
          </div>

          {/* Order Summary */}
          <div className="order-summary">
            <div className="summary-row">
              <span>–¢–æ–≤–∞—Ä—ã ({cartItems.length})</span>
              <span>{getTotalPrice()} ‚ÇΩ</span>
            </div>
            
            <div className="summary-row">
              <span>–î–æ—Å—Ç–∞–≤–∫–∞</span>
              <span>{getDeliveryFee() === 0 ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : `${getDeliveryFee()} ‚ÇΩ`}</span>
            </div>
            
            <div className="summary-row total">
              <span>–ò—Ç–æ–≥–æ</span>
              <span>{getFinalTotal()} ‚ÇΩ</span>
            </div>
          </div>

          {/* Order Button */}
          <button className="order-btn" onClick={handleOrder}>
            –û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–ó - {getFinalTotal()} ‚ÇΩ
          </button>
        </>
      )}
    </div>
  );
}; 