import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import '../styles.css';

interface DayPlan {
  id: number;
  title: string;
  type: 'workout' | 'nutrition';
  time: string;
}

interface CompletedWorkout {
  date: string;
  completedCount: number;
  totalCount: number;
  percentage: number;
  originalPlannedDay?: number;
  originalPlannedMonth?: number;
  originalPlannedYear?: number;
}

const Schedule: React.FC = () => {
  const navigate = useNavigate();
  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());
  const [selectedDay, setSelectedDay] = useState<number | null>(null);
  const [lastCompletedWorkout, setLastCompletedWorkout] = useState<any>(null);
  const [completedWorkouts, setCompletedWorkouts] = useState<CompletedWorkout[]>([]);
  const [plannedDay, setPlannedDay] = useState<number | null>(null); // –î–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∞—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const savedWorkout = localStorage.getItem('lastCompletedWorkout');
    if (savedWorkout) {
      setLastCompletedWorkout(JSON.parse(savedWorkout));
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    const savedCompletedWorkouts = localStorage.getItem('completedWorkouts');
    if (savedCompletedWorkouts) {
      setCompletedWorkouts(JSON.parse(savedCompletedWorkouts));
    }
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const currentMonth = new Date().getMonth();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω
    const timer = setTimeout(() => {
      const activeMonthBtn = document.querySelector(`[data-month="${currentMonth}"]`);
      
      if (activeMonthBtn) {
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –º–µ—Å—è—Ü—É
        activeMonthBtn.scrollIntoView({
          behavior: 'smooth',
          block: 'nearest',
          inline: 'center'
        });
      }
    }, 100);
    
    return () => clearTimeout(timer);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å
  const isWorkoutCompleted = (day: number): boolean => {
    const currentYear = new Date().getFullYear();
    
    return completedWorkouts.some(workout => {
      const workoutDate = new Date(workout.date);
      const workoutDay = workoutDate.getDate();
      const workoutMonth = workoutDate.getMonth();
      const workoutYear = workoutDate.getFullYear();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π –¥–µ–Ω—å
      if (workoutDay === day && 
          workoutMonth === selectedMonth && 
          workoutYear === currentYear) {
        return true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞)
      if (workout.originalPlannedDay && 
          workout.originalPlannedDay === day &&
          workout.originalPlannedMonth === selectedMonth &&
          workout.originalPlannedYear === currentYear) {
        return true;
      }
      
      return false;
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–º)
  const isWorkoutMoved = (day: number): boolean => {
    const currentYear = new Date().getFullYear();
    
    return completedWorkouts.some(workout => {
      const workoutDate = new Date(workout.date);
      const workoutDay = workoutDate.getDate();
      const workoutMonth = workoutDate.getMonth();
      const workoutYear = workoutDate.getFullYear();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å, –Ω–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∞—Å—å –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å
      if (workoutDay === day && 
          workoutMonth === selectedMonth && 
          workoutYear === currentYear &&
          workout.originalPlannedDay &&
          (workout.originalPlannedDay !== day || 
           workout.originalPlannedMonth !== selectedMonth ||
           workout.originalPlannedYear !== currentYear)) {
        return true;
      }
      
      return false;
    });
  };

  const months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
  const weekDays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
  
  // –î–Ω–∏ —Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
  const scheduledWorkouts = [3, 7, 10, 14, 17, 21, 24, 28];

  const handleDateClick = (day: number) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ
    const currentYear = new Date().getFullYear();
    const lastDayOfMonth = new Date(currentYear, selectedMonth + 1, 0);
    const daysInMonth = lastDayOfMonth.getDate();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–Ω—å –≤—Ö–æ–¥–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –º–µ—Å—è—Ü–∞ –∏ –µ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    if (day >= 1 && day <= daysInMonth && scheduledWorkouts.includes(day)) {
      setSelectedDay(selectedDay === day ? null : day);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–Ω—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
      if (selectedDay !== day) {
        setPlannedDay(day);
      } else {
        setPlannedDay(null);
      }
    }
  };

  const handlePlanClick = (planType: string) => {
    if (planType === 'workout') {
      // –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–Ω–µ —á–µ—Ä–µ–∑ localStorage
      if (plannedDay) {
        localStorage.setItem('plannedWorkoutDay', JSON.stringify({
          day: plannedDay,
          month: selectedMonth,
          year: new Date().getFullYear()
        }));
      }
      navigate('workouts');
    } else if (planType === 'nutrition') {
      navigate('nutrition');
    }
  };

  const plans: DayPlan[] = [
    { id: 1, title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', type: 'workout', time: '09:00' },
    { id: 2, title: '–ü–∏—Ç–∞–Ω–∏–µ', type: 'nutrition', time: '10:00' }
  ];

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
  const generateCalendar = () => {
    const currentYear = new Date().getFullYear();
    const firstDayOfMonth = new Date(currentYear, selectedMonth, 1);
    const lastDayOfMonth = new Date(currentYear, selectedMonth + 1, 0);
    const daysInMonth = lastDayOfMonth.getDate();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞ (0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –∏ —Ç.–¥.)
    let firstDayWeekday = firstDayOfMonth.getDay();
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç (0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    firstDayWeekday = firstDayWeekday === 0 ? 6 : firstDayWeekday - 1;
    
    const calendar = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –¥–Ω–µ–π –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
    for (let i = 0; i < firstDayWeekday; i++) {
      calendar.push(null);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= daysInMonth; day++) {
      calendar.push(day);
    }
    
    return calendar;
  };

  const calendarDays = generateCalendar();

  return (
    <div className="schedule-container">
      <main className="main-content">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
        <header className="header-section">
          <div className="title-container">
            <h1>–ú–æ—ë</h1>
            <h1>—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h1>
          </div>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ */}
          {lastCompletedWorkout && (
            <div className="last-workout-info">
              <div className="workout-badge">
                <span className="workout-icon">üí™</span>
                <span className="workout-text">–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</span>
                <span className="workout-date">
                  {new Date(lastCompletedWorkout.date).toLocaleDateString('ru-RU', {
                    day: 'numeric',
                    month: 'short'
                  })}
                </span>
              </div>
              <div className="workout-stats">
                <span className="stats-text">–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</span>
                <span className="completed-exercises">{lastCompletedWorkout.completedCount}</span>
                <span className="total-exercises">/{lastCompletedWorkout.totalCount}</span>
                <span className="percentage">({lastCompletedWorkout.percentage}%)</span>
              </div>
            </div>
          )}

          <nav className="month-navigation">
            {months.map((month, index) => (
              <div key={index} className="month-item">
                <button
                  data-month={index}
                  onClick={() => setSelectedMonth(index)}
                  className={`month-btn ${selectedMonth === index ? 'active' : ''}`}
                >
                  {month}
                </button>
                {selectedMonth === index && (
                  <div className="month-underline"></div>
                )}
              </div>
            ))}
          </nav>
        </header>

        {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å */}
        <section className="calendar-section">
          {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ */}
          <div className="calendar-header">
            {weekDays.map((day) => (
              <div key={day} className="day-header">
                {day}
              </div>
            ))}
          </div>

          {/* –°–µ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è */}
          <div className="calendar-grid">
            {calendarDays.map((day, index) => {
              if (day === null) {
                return <div key={`empty-${index}`} className="calendar-day empty"></div>;
              }
              
              const isCompleted = isWorkoutCompleted(day);
              const isMoved = isWorkoutMoved(day);
              return (
                <button
                  key={day}
                  data-day={day}
                  onClick={() => handleDateClick(day)}
                  className={`calendar-day ${selectedDay === day && scheduledWorkouts.includes(day) ? 'selected' : ''} ${scheduledWorkouts.includes(day) ? 'has-workout' : ''} ${isCompleted ? 'completed' : ''} ${isMoved ? 'moved' : ''}`}
                  disabled={!scheduledWorkouts.includes(day)}
                >
                  {day}
                  {isCompleted && <span className="completion-check">‚úì</span>}
                  {isMoved && <span className="moved-indicator">‚Üî</span>}
                </button>
              );
            })}
          </div>
        </section>
      </main>

      {/* –ü–ª–∞–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π */}
      {selectedDay && scheduledWorkouts.includes(selectedDay) && (
        <>
          <section className="plans-section">
            <h2>–ü–ª–∞–Ω—ã –Ω–∞ {selectedDay} {months[selectedMonth].toLowerCase()}</h2>
          </section>
          
          <div className="plans-list">
            {plans.map((plan) => (
              <div
                key={plan.id}
                className={`plan-card clickable ${plan.type === 'workout' ? 'workout' : 'nutrition'}`}
                onClick={() => handlePlanClick(plan.type)}
              >
                <div className="plan-info">
                  <h3>{plan.title}</h3>
                  <p className="plan-time">{plan.time}</p>
                </div>
                <div className="plan-arrow">‚Ä∫</div>
              </div>
            ))}
          </div>
        </>
      )}
    </div>
  );
};

export { Schedule };
