import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { addToGlobalCart, getGlobalCart, subscribeToCartUpdates, removeFromGlobalCart, updateGlobalCartItemWithData, updateCartItemCommentWithAddons } from './MenuList';
import { initTelegramMiniApp, setupTelegramBackButton } from '../../../utils/telegramUtils';
import { getFavorites, subscribeToFavoritesUpdates, toggleFavorite as toggleGlobalFavorite } from '../utils/favoritesManager';
import { getAddonsForItem, calculateAddonsPrice, getRecommendedItemsForItem, getTagsForItem, type Addon, type MenuItem, type Tag } from '../utils/dataLoader';
import { saveTempItemData, getTempItemData, clearTempItemData } from '../utils/tempDataManager';

interface ItemDetailProps {
  item: MenuItem;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "—à—Ç"
const getQuantityText = (quantity: number): string => {
  const lastDigit = quantity % 10;
  const lastTwoDigits = quantity % 100;
  
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return '—à—Ç';
  }
  
  switch (lastDigit) {
    case 1:
      return '—à—Ç';
    case 2:
    case 3:
    case 4:
      return '—à—Ç';
    default:
      return '—à—Ç';
  }
};

export const ItemDetail: React.FC<ItemDetailProps> = ({ item }) => {
  const navigate = useNavigate();
  const [selectedAddons, setSelectedAddons] = useState<number[]>([]);
  const [comment, setComment] = useState('');
  const [isFavorite, setIsFavorite] = useState(false);
  const [isInCart, setIsInCart] = useState(false);
  const [cartQuantity, setCartQuantity] = useState(0);
  const [isButtonPressed, setIsButtonPressed] = useState(false);
  const [imageError, setImageError] = useState(false);
  const [imageLoading, setImageLoading] = useState(true);

  const addons: Addon[] = getAddonsForItem(item.id);
  const recommendedItems: MenuItem[] = getRecommendedItemsForItem(item.id);
  const tags: Tag[] = getTagsForItem(item.id);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞
  const truncateText = (text: string, maxLength: number): string => {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength).trim() + '...';
  };

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏
  useEffect(() => {
    setImageError(false);
    setImageLoading(true);
  }, [item.id]);

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  useEffect(() => {
    if (item.image && item.image.trim() !== '') {
      const img = new Image();
      img.src = `${item.image}?v=${item.id}`;
      img.onload = () => {
        setImageError(false);
        setImageLoading(false);
      };
      img.onerror = () => {
        setImageError(true);
        setImageLoading(false);
      };
    } else {
      setImageLoading(false);
    }
  }, [item.id, item.image]);

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  useEffect(() => {
    // –°–∫—Ä–æ–ª–ª –Ω–∞–≤–µ—Ä—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    window.scrollTo(0, 0);

    const unsubscribeCart = subscribeToCartUpdates(() => {
      const cart = getGlobalCart();
      const cartItem = cart.find(cartItem => cartItem.id === item.id);
      setIsInCart(!!cartItem);
      setCartQuantity(cartItem ? cartItem.quantity : 0);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
      if (cartItem) {
        setComment(cartItem.comment || '');
        setSelectedAddons(cartItem.selectedAddons || []);
        setIsButtonPressed(true);
      }
    });

    const unsubscribeFavorites = subscribeToFavoritesUpdates(() => {
      const favorites = getFavorites();
      setIsFavorite(!!favorites[item.id]);
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    const cart = getGlobalCart();
    const cartItem = cart.find(cartItem => cartItem.id === item.id);
    setIsInCart(!!cartItem);
    setCartQuantity(cartItem ? cartItem.quantity : 0);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, –ø–æ—Ç–æ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if (cartItem) {
      setComment(cartItem.comment || '');
      setSelectedAddons(cartItem.selectedAddons || []);
      setIsButtonPressed(true);
    } else {
      // –ï—Å–ª–∏ –∫–Ω–∏–≥–∏ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const tempData = getTempItemData(item.id);
      if (tempData) {
        setComment(tempData.comment);
        setSelectedAddons(tempData.selectedAddons);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setComment('');
        setSelectedAddons([]);
      }
      setIsButtonPressed(false);
    }

    const favorites = getFavorites();
    setIsFavorite(!!favorites[item.id]);

    return () => {
      unsubscribeCart();
      unsubscribeFavorites();
    };
  }, [item.id]); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç item.id

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram MiniApp
  useEffect(() => {
    initTelegramMiniApp();
    setupTelegramBackButton();
  }, []);

  const handleAddonToggle = (addonId: number) => {
    const newSelectedAddons = selectedAddons.includes(addonId) 
      ? selectedAddons.filter(id => id !== addonId)
      : [...selectedAddons, addonId];
    
    setSelectedAddons(newSelectedAddons);
    
    // –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (isInCart) {
      updateCartItemCommentWithAddons(item.id, comment, newSelectedAddons);
    } else {
      // –ï—Å–ª–∏ –∫–Ω–∏–≥–∏ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      saveTempItemData(item.id, newSelectedAddons, comment);
    }
  };

  const getTotalPrice = () => {
    const addonsPrice = calculateAddonsPrice(selectedAddons);
    return item.price + addonsPrice;
  };

  const handleDecreaseQuantity = () => {
    if (cartQuantity === 1) {
      removeFromGlobalCart(item.id);
      // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–∏–≥—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
      setIsButtonPressed(false);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      saveTempItemData(item.id, selectedAddons, comment);
    } else {
      updateGlobalCartItemWithData(item.id, cartQuantity - 1, comment, selectedAddons);
    }
  };

  const handleIncreaseQuantity = () => {
    addToGlobalCart(item, comment, selectedAddons);
    // –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ pressed, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ pressed
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ useEffect –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
  };

  const toggleFavorite = () => {
    toggleGlobalFavorite(item.id);
  };

  const handleButtonPress = () => {
    if (!isInCart) {
      // –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –∫–æ—Ä–∑–∏–Ω—É
      addToGlobalCart(item, comment, selectedAddons);
      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –∫–Ω–∏–≥–∞ —Ç–µ–ø–µ—Ä—å –≤ –∫–æ—Ä–∑–∏–Ω–µ
      clearTempItemData(item.id);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ pressed
      setIsButtonPressed(true);
    }
  };

  const handleGoToCart = () => {
    navigate('/miniapp/books_store/cart');
  };

  const handleBackToMenu = () => {
    navigate('/miniapp/books_store');
  };

  return (
    <div className="item-detail-page">
      {/* Header */}
      <div className="detail-header">
        <h1 className="detail-title">{item.name}</h1>
      </div>

      {/* Main Image */}
      <div className="item-image-large">
        <button 
          className={`favorite-btn-large ${isFavorite ? 'active' : ''}`}
          onClick={toggleFavorite}
        >
          {isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}
        </button>
        {item.image && item.image.trim() !== '' ? (
          <img 
            src={`${item.image}?v=${item.id}`} 
            alt={item.name}
            style={{ 
              width: '100%', 
              height: '100%', 
              objectFit: 'cover',
              display: imageError ? 'none' : 'block'
            }}
            onLoad={() => {
              setImageError(false);
              setImageLoading(false);
            }}
            onError={(e) => {
              setImageError(true);
              setImageLoading(false);
              e.currentTarget.style.display = 'none';
              const placeholder = e.currentTarget.nextElementSibling as HTMLElement;
              if (placeholder) {
                placeholder.style.display = 'flex';
              }
            }}
          />
        ) : null}
        <div 
          className="image-placeholder-large"
          style={{ 
            display: (item.image && item.image.trim() !== '' && !imageError) ? 'none' : 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            color: '#999',
            fontSize: '14px'
          }}
        >
          {imageLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
        </div>
      </div>

      {/* Item Info */}
      <div className="item-info-detail">
        <h2 className="item-name-detail">{item.name}</h2>
        <div className="item-meta-row">
          <p className="item-weight-detail">–ê–≤—Ç–æ—Ä: {item.size}</p>
          <p className="item-waiting-time-detail">–í –Ω–∞–ª–∏—á–∏–∏: {item.stock} —à—Ç.</p>
        </div>
        <p className="item-description-detail">
          {item.description}
        </p>
        {/* Tags */}
        {tags.length > 0 && (
          <div className="item-tags">
            {tags.map((tag) => (
              <span
                key={tag.id}
                className="item-tag"
                style={{
                  color: tag.color,
                  backgroundColor: tag.backgroundColor,
                  border: `1px solid ${tag.color}`
                }}
              >
                {tag.name}
              </span>
            ))}
          </div>
        )}
      </div>

      {/* Add-ons Section */}
      <div className="addons-section">
        <h3 className="section-title-detail">–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
        <div className="addons-list">
          {addons.map((addon) => (
            <label key={addon.id} className="addon-item">
              <input
                type="checkbox"
                checked={selectedAddons.includes(addon.id)}
                onChange={() => handleAddonToggle(addon.id)}
                className="addon-checkbox"
              />
              <span className="addon-name">{addon.name}</span>
              <span className="addon-price">+ {addon.price} ‚ÇΩ</span>
            </label>
          ))}
        </div>
      </div>

      {/* Comments Section */}
      <div className="comments-section">
        <h3 className="section-title-detail">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</h3>
        <textarea
          className="comment-input"
          placeholder="–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑—É..."
          value={comment}
          onChange={(e) => {
            const newComment = e.target.value;
            setComment(newComment);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø—Ä–∏ –≤–≤–æ–¥–µ
            if (isInCart) {
              updateCartItemCommentWithAddons(item.id, newComment, selectedAddons);
            } else {
              // –ï—Å–ª–∏ –∫–Ω–∏–≥–∏ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
              saveTempItemData(item.id, selectedAddons, newComment);
            }
          }}
        />
      </div>

      {/* Recommended Items */}
      <div className="recommended-section">
        <h3 className="section-title-detail">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–Ω–∏–≥–∏</h3>
        <div className="recommended-list">
          {recommendedItems.map((recItem) => (
            <div 
              key={recItem.id} 
              className="recommended-item"
              onClick={() => {
                navigate(`/miniapp/books_store/item/${recItem.id}`);
                // –°–∫—Ä–æ–ª–ª –Ω–∞–≤–µ—Ä—Ö –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –∫–Ω–∏–≥–µ
                window.scrollTo(0, 0);
              }}
              style={{ cursor: 'pointer' }}
            >
              <div className="rec-item-image">
                {recItem.image && recItem.image.trim() !== '' ? (
                  <img 
                    src={`${recItem.image}?v=${recItem.id}`} 
                    alt={recItem.name}
                    style={{ 
                      width: '50px', 
                      height: '50px', 
                      objectFit: 'cover',
                      borderRadius: '6px'
                    }}
                    onLoad={() => {
                      // –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    }}
                    onError={(e) => {
                      e.currentTarget.style.display = 'none';
                      const placeholder = e.currentTarget.nextElementSibling as HTMLElement;
                      if (placeholder) {
                        placeholder.style.display = 'flex';
                      }
                    }}
                  />
                ) : null}
                <div 
                  className="image-placeholder-small"
                  style={{ display: recItem.image && recItem.image.trim() !== '' ? 'none' : 'flex' }}
                >
                </div>
              </div>
              <div className="rec-item-info">
                <h4 className="rec-item-name">{recItem.name}</h4>
                <p className="rec-item-volume">–ê–≤—Ç–æ—Ä: {recItem.size}</p>
                <p className="rec-item-description">{truncateText(recItem.description, 60)}</p>
              </div>
              <button className="rec-item-arrow">‚Üí</button>
            </div>
          ))}
        </div>
      </div>

      {/* Bottom Action Bar */}
      <div className={`bottom-action-bar ${isInCart ? 'active' : ''} ${isButtonPressed ? 'pressed' : ''}`} onClick={!isInCart ? handleButtonPress : undefined}>
        {!isInCart && !isButtonPressed ? (
          <span className="total-price">–í –∫–æ—Ä–∑–∏–Ω—É ‚Äì {getTotalPrice()} ‚ÇΩ</span>
        ) : !isInCart && isButtonPressed ? (
          <>
            <button 
              className="quantity-btn minus"
              onClick={(e) => {
                e.stopPropagation();
                if (cartQuantity > 0) {
                  handleDecreaseQuantity();
                }
              }}
            >
              {cartQuantity === 1 ? (
                <span className="material-symbols-outlined">delete</span>
              ) : (
                '‚àí'
              )}
            </button>
            <span className="total-price">{getTotalPrice()} ‚ÇΩ</span>
            <button 
              className="quantity-btn plus"
              onClick={(e) => {
                e.stopPropagation();
                handleIncreaseQuantity();
              }}
            >
              +
            </button>
          </>
        ) : isInCart && isButtonPressed ? (
          <>
            <button 
              className="quantity-btn minus"
              onClick={(e) => {
                e.stopPropagation();
                if (cartQuantity > 0) {
                  handleDecreaseQuantity();
                }
              }}
            >
              {cartQuantity === 1 ? (
                <span className="material-symbols-outlined">delete</span>
              ) : (
                '‚àí'
              )}
            </button>
            <span className="total-price">{cartQuantity} {getQuantityText(cartQuantity)} ‚Äì {getTotalPrice() * cartQuantity} ‚ÇΩ</span>
            <button 
              className="quantity-btn plus"
              onClick={(e) => {
                e.stopPropagation();
                handleIncreaseQuantity();
              }}
            >
              +
            </button>
          </>
        ) : (
          <>
            <button 
              className="quantity-btn minus"
              onClick={(e) => {
                e.stopPropagation();
                handleDecreaseQuantity();
              }}
            >
              {cartQuantity === 1 ? (
                <span className="material-symbols-outlined">delete</span>
              ) : (
                '‚àí'
              )}
            </button>
            <span className="total-price">{cartQuantity} {getQuantityText(cartQuantity)} ‚Äì {getTotalPrice() * cartQuantity} ‚ÇΩ</span>
            <button 
              className="quantity-btn plus"
              onClick={(e) => {
                e.stopPropagation();
                handleIncreaseQuantity();
              }}
            >
              +
            </button>
          </>
        )}
      </div>

      {/* Separate Back Button */}
      {(isInCart || isButtonPressed) && (
        <button 
          className="separate-back-btn"
          onClick={(e) => {
            e.stopPropagation();
            handleBackToMenu();
          }}
        >
          ‚Üê
        </button>
      )}

      {/* Separate Cart Button */}
      {(isInCart || isButtonPressed) && (
        <button 
          className="separate-cart-btn"
          onClick={(e) => {
            e.stopPropagation();
            handleGoToCart();
          }}
        >
          üõí
        </button>
      )}
    </div>
  );
}; 